# Generated by Django 4.2.5 on 2024-09-08 15:23

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


def create_roles(apps, schema_editor):
    Role = apps.get_model('registration', 'Role')  
    roles = ['Студент', 'Аккаунт-менеджер', 'Преподаватель', 'Суперадмин']
    for role in roles:
        Role.objects.create(name=role)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('tg_nickname', models.CharField(blank=True, max_length=255, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('instagram_nickname', models.CharField(blank=True, max_length=255, null=True)),
                ('group_number', models.CharField(blank=True, max_length=20, null=True)),
                ('points', models.IntegerField(default=0)),
                ('student_status', models.CharField(blank=True, choices=[('studying', 'Учится'), ('academic_leave', 'В академ. отпуске'), ('returned', 'Возврат'), ('finished', 'Закончил обучение')], max_length=50, null=True)),
                ('package', models.CharField(blank=True, max_length=50, null=True)),
                ('internship_included', models.BooleanField(default=False)),
                ('diploma_defended', models.BooleanField(default=False)),
                ('groups_teaching_now', models.CharField(blank=True, max_length=255, null=True)),
                ('groups_taught_before', models.CharField(blank=True, max_length=255, null=True)),
                ('teacher_comment', models.TextField(blank=True, null=True)),
                ('teacher_status', models.CharField(blank=True, choices=[('working', 'Работает'), ('not_working', 'Не работает')], max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='registration.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RunPython(create_roles),
    ]
